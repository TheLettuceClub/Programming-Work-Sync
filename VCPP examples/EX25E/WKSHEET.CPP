// Machine generated IDispatch driver class(es) created with ClassWizard.

#include "stdafx.h"
#include "wksheet.h"


/////////////////////////////////////////////////////////////////////////////
// Worksheet properties

VARIANT Worksheet::GetAutoFilterMode()
{
    VARIANT result;
    GetProperty(0x318, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetAutoFilterMode(const VARIANT& propVal)
{
    SetProperty(0x318, VT_VARIANT, &propVal);
}

VARIANT Worksheet::GetCircularReference()
{
    VARIANT result;
    GetProperty(0x42d, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetCircularReference(const VARIANT& propVal)
{
    SetProperty(0x42d, VT_VARIANT, &propVal);
}

VARIANT Worksheet::GetConsolidationFunction()
{
    VARIANT result;
    GetProperty(0x315, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetConsolidationFunction(const VARIANT& propVal)
{
    SetProperty(0x315, VT_VARIANT, &propVal);
}

VARIANT Worksheet::GetConsolidationOptions()
{
    VARIANT result;
    GetProperty(0x316, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetConsolidationOptions(const VARIANT& propVal)
{
    SetProperty(0x316, VT_VARIANT, &propVal);
}

VARIANT Worksheet::GetConsolidationSources()
{
    VARIANT result;
    GetProperty(0x317, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetConsolidationSources(const VARIANT& propVal)
{
    SetProperty(0x317, VT_VARIANT, &propVal);
}

VARIANT Worksheet::GetCreator()
{
    VARIANT result;
    GetProperty(0x95, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetCreator(const VARIANT& propVal)
{
    SetProperty(0x95, VT_VARIANT, &propVal);
}

VARIANT Worksheet::GetDisplayAutomaticPageBreaks()
{
    VARIANT result;
    GetProperty(0x283, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetDisplayAutomaticPageBreaks(const VARIANT& propVal)
{
    SetProperty(0x283, VT_VARIANT, &propVal);
}

VARIANT Worksheet::GetFilterMode()
{
    VARIANT result;
    GetProperty(0x320, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetFilterMode(const VARIANT& propVal)
{
    SetProperty(0x320, VT_VARIANT, &propVal);
}

VARIANT Worksheet::GetIndex()
{
    VARIANT result;
    GetProperty(0x1e6, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetIndex(const VARIANT& propVal)
{
    SetProperty(0x1e6, VT_VARIANT, &propVal);
}

VARIANT Worksheet::GetName()
{
    VARIANT result;
    GetProperty(0x6e, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetName(const VARIANT& propVal)
{
    SetProperty(0x6e, VT_VARIANT, &propVal);
}

VARIANT Worksheet::GetNext()
{
    VARIANT result;
    GetProperty(0x1f6, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetNext(const VARIANT& propVal)
{
    SetProperty(0x1f6, VT_VARIANT, &propVal);
}

VARIANT Worksheet::GetOnCalculate()
{
    VARIANT result;
    GetProperty(0x271, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetOnCalculate(const VARIANT& propVal)
{
    SetProperty(0x271, VT_VARIANT, &propVal);
}

VARIANT Worksheet::GetOnData()
{
    VARIANT result;
    GetProperty(0x275, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetOnData(const VARIANT& propVal)
{
    SetProperty(0x275, VT_VARIANT, &propVal);
}

VARIANT Worksheet::GetOnDoubleClick()
{
    VARIANT result;
    GetProperty(0x274, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetOnDoubleClick(const VARIANT& propVal)
{
    SetProperty(0x274, VT_VARIANT, &propVal);
}

VARIANT Worksheet::GetOnEntry()
{
    VARIANT result;
    GetProperty(0x273, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetOnEntry(const VARIANT& propVal)
{
    SetProperty(0x273, VT_VARIANT, &propVal);
}

VARIANT Worksheet::GetOnSheetActivate()
{
    VARIANT result;
    GetProperty(0x407, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetOnSheetActivate(const VARIANT& propVal)
{
    SetProperty(0x407, VT_VARIANT, &propVal);
}

VARIANT Worksheet::GetOnSheetDeactivate()
{
    VARIANT result;
    GetProperty(0x439, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetOnSheetDeactivate(const VARIANT& propVal)
{
    SetProperty(0x439, VT_VARIANT, &propVal);
}

VARIANT Worksheet::GetOutline()
{
    VARIANT result;
    GetProperty(0x66, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetOutline(const VARIANT& propVal)
{
    SetProperty(0x66, VT_VARIANT, &propVal);
}

VARIANT Worksheet::GetPageSetup()
{
    VARIANT result;
    GetProperty(0x3e6, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetPageSetup(const VARIANT& propVal)
{
    SetProperty(0x3e6, VT_VARIANT, &propVal);
}

VARIANT Worksheet::GetParent()
{
    VARIANT result;
    GetProperty(0x96, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetParent(const VARIANT& propVal)
{
    SetProperty(0x96, VT_VARIANT, &propVal);
}

VARIANT Worksheet::GetPrevious()
{
    VARIANT result;
    GetProperty(0x1f7, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetPrevious(const VARIANT& propVal)
{
    SetProperty(0x1f7, VT_VARIANT, &propVal);
}

VARIANT Worksheet::GetProtectContents()
{
    VARIANT result;
    GetProperty(0x124, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetProtectContents(const VARIANT& propVal)
{
    SetProperty(0x124, VT_VARIANT, &propVal);
}

VARIANT Worksheet::GetProtectDrawingObjects()
{
    VARIANT result;
    GetProperty(0x125, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetProtectDrawingObjects(const VARIANT& propVal)
{
    SetProperty(0x125, VT_VARIANT, &propVal);
}

VARIANT Worksheet::GetProtectScenarios()
{
    VARIANT result;
    GetProperty(0x126, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetProtectScenarios(const VARIANT& propVal)
{
    SetProperty(0x126, VT_VARIANT, &propVal);
}

VARIANT Worksheet::GetStandardHeight()
{
    VARIANT result;
    GetProperty(0x197, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetStandardHeight(const VARIANT& propVal)
{
    SetProperty(0x197, VT_VARIANT, &propVal);
}

VARIANT Worksheet::GetStandardWidth()
{
    VARIANT result;
    GetProperty(0x198, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetStandardWidth(const VARIANT& propVal)
{
    SetProperty(0x198, VT_VARIANT, &propVal);
}

VARIANT Worksheet::GetTransitionExpEval()
{
    VARIANT result;
    GetProperty(0x191, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetTransitionExpEval(const VARIANT& propVal)
{
    SetProperty(0x191, VT_VARIANT, &propVal);
}

VARIANT Worksheet::GetTransitionFormEntry()
{
    VARIANT result;
    GetProperty(0x192, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetTransitionFormEntry(const VARIANT& propVal)
{
    SetProperty(0x192, VT_VARIANT, &propVal);
}

VARIANT Worksheet::GetType()
{
    VARIANT result;
    GetProperty(0x6c, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetType(const VARIANT& propVal)
{
    SetProperty(0x6c, VT_VARIANT, &propVal);
}

VARIANT Worksheet::GetUsedRange()
{
    VARIANT result;
    GetProperty(0x19c, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetUsedRange(const VARIANT& propVal)
{
    SetProperty(0x19c, VT_VARIANT, &propVal);
}

VARIANT Worksheet::GetVisible()
{
    VARIANT result;
    GetProperty(0x22e, VT_VARIANT, (void*)&result);
    return result;
}

void Worksheet::SetVisible(const VARIANT& propVal)
{
    SetProperty(0x22e, VT_VARIANT, &propVal);
}

/////////////////////////////////////////////////////////////////////////////
// Worksheet operations

VARIANT Worksheet::Activate()
{
    VARIANT result;
    InvokeHelper(0x130, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
    return result;
}

VARIANT Worksheet::Application()
{
    VARIANT result;
    InvokeHelper(0x94, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
    return result;
}

VARIANT Worksheet::Arcs(const VARIANT& Index)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT;
    InvokeHelper(0x2f8, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Index);
    return result;
}

VARIANT Worksheet::Buttons(const VARIANT& Index)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT;
    InvokeHelper(0x22d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Index);
    return result;
}

VARIANT Worksheet::Calculate()
{
    VARIANT result;
    InvokeHelper(0x117, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
    return result;
}

VARIANT Worksheet::Cells(const VARIANT& RowIndex, const VARIANT& ColumnIndex)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT VTS_VARIANT;
    InvokeHelper(0xee, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &RowIndex, &ColumnIndex);
    return result;
}

VARIANT Worksheet::ChartObjects(const VARIANT& Index)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT;
    InvokeHelper(0x424, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Index);
    return result;
}

VARIANT Worksheet::CheckBoxes(const VARIANT& Index)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT;
    InvokeHelper(0x338, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Index);
    return result;
}

VARIANT Worksheet::CheckSpelling(const VARIANT& CustomDictionary, const VARIANT& IgnoreUppercase, const VARIANT& AlwaysSuggest)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT VTS_VARIANT VTS_VARIANT;
    InvokeHelper(0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest);
    return result;
}

VARIANT Worksheet::ClearArrows()
{
    VARIANT result;
    InvokeHelper(0x3ca, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
    return result;
}

VARIANT Worksheet::Columns(const VARIANT& Index)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT;
    InvokeHelper(0xf1, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Index);
    return result;
}

VARIANT Worksheet::Copy(const VARIANT& Before, const VARIANT& After)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT VTS_VARIANT;
    InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Before, &After);
    return result;
}

VARIANT Worksheet::Delete()
{
    VARIANT result;
    InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
    return result;
}

VARIANT Worksheet::DrawingObjects(const VARIANT& Index)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT;
    InvokeHelper(0x58, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Index);
    return result;
}

VARIANT Worksheet::Drawings(const VARIANT& Index)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT;
    InvokeHelper(0x304, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Index);
    return result;
}

VARIANT Worksheet::DropDowns(const VARIANT& Index)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT;
    InvokeHelper(0x344, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Index);
    return result;
}

VARIANT Worksheet::_Evaluate(const VARIANT& Name)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT;
    InvokeHelper(0x1, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Name);
    return result;
}

VARIANT Worksheet::Evaluate(const VARIANT& Name)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT;
    InvokeHelper(0xfffffffb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Name);
    return result;
}

VARIANT Worksheet::GroupBoxes(const VARIANT& Index)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT;
    InvokeHelper(0x342, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Index);
    return result;
}

VARIANT Worksheet::GroupObjects(const VARIANT& Index)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT;
    InvokeHelper(0x459, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Index);
    return result;
}

VARIANT Worksheet::Labels(const VARIANT& Index)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT;
    InvokeHelper(0x349, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Index);
    return result;
}

VARIANT Worksheet::Lines(const VARIANT& Index)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT;
    InvokeHelper(0x2ff, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Index);
    return result;
}

VARIANT Worksheet::ListBoxes(const VARIANT& Index)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT;
    InvokeHelper(0x340, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Index);
    return result;
}

VARIANT Worksheet::Move(const VARIANT& Before, const VARIANT& After)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT VTS_VARIANT;
    InvokeHelper(0x27d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Before, &After);
    return result;
}

VARIANT Worksheet::OLEObjects(const VARIANT& Index)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT;
    InvokeHelper(0x31f, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Index);
    return result;
}

VARIANT Worksheet::OptionButtons(const VARIANT& Index)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] = VTS_VARIANT;
    InvokeHelper(0x33a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Index);
    return result;
}

VARIANT Worksheet::Ovals(const VARIANT& Index)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] = VTS_VARIANT;
    InvokeHelper(0x321, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Index);
    return result;
}

VARIANT Worksheet::Paste(const VARIANT& Destination, const VARIANT& Link)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT VTS_VARIANT;
    InvokeHelper(0xd3, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Destination, &Link);
    return result;
}

VARIANT Worksheet::PasteSpecial(const VARIANT& Format, const VARIANT& Link, const VARIANT& DisplayAsIcon, const VARIANT& IconFileName, const VARIANT& IconIndex, const VARIANT& IconLabel)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
    InvokeHelper(0x403, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Format, &Link, &DisplayAsIcon, &IconFileName, &IconIndex, &IconLabel);
    return result;
}

VARIANT Worksheet::Pictures(const VARIANT& Index)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] = VTS_VARIANT;
    InvokeHelper(0x303, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Index);
    return result;
}

VARIANT Worksheet::PivotTables(const VARIANT& Index)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] = VTS_VARIANT;
    InvokeHelper(0x2b2, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Index);
    return result;
}

VARIANT Worksheet::PivotTableWizard(const VARIANT& SourceType, const VARIANT& SourceData, const VARIANT& TableDestination, const VARIANT& TableName, const VARIANT& RowGrand, const VARIANT& ColumnGrand, const VARIANT& SaveData, 
        const VARIANT& HasAutoFormat, const VARIANT& AutoPage)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
    InvokeHelper(0x2ac, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &SourceType, &SourceData, &TableDestination, &TableName, &RowGrand, &ColumnGrand, &SaveData, &HasAutoFormat, &AutoPage);
    return result;
}

VARIANT Worksheet::PrintOut(const VARIANT& From, const VARIANT& To, const VARIANT& Copies, const VARIANT& Preview)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
    InvokeHelper(0x389, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &From, &To, &Copies, &Preview);
    return result;
}

VARIANT Worksheet::PrintPreview()
{
    VARIANT result;
    InvokeHelper(0x119, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
    return result;
}

VARIANT Worksheet::Protect(const VARIANT& Password, const VARIANT& DrawingObjects, const VARIANT& Contents, const VARIANT& Scenarios)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
    InvokeHelper(0x11a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Password, &DrawingObjects, &Contents, &Scenarios);
    return result;
}

// return changed to LPDISPATCH r.t.
LPDISPATCH Worksheet::Range(const VARIANT& Cell1, const VARIANT& Cell2)
{
    TRACE("Entering Worksheet::Range(Cell1, Cell2)\n");
    LPDISPATCH result;
    static BYTE BASED_CODE parms[] = VTS_VARIANT VTS_VARIANT;
    InvokeHelper(0xc5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
        &Cell1, &Cell2);
    return result;
}
// new one for one argument
LPDISPATCH Worksheet::Range(const VARIANT& Cell1)
{
    TRACE("Entering Worksheet::Range(Cell1)\n");
    LPDISPATCH result;
    static BYTE BASED_CODE parms[] = VTS_VARIANT;
    InvokeHelper(0xc5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
        &Cell1);
    return result;
}

VARIANT Worksheet::Rectangles(const VARIANT& Index)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT;
    InvokeHelper(0x306, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Index);
    return result;
}

VARIANT Worksheet::Rows(const VARIANT& Index)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] = VTS_VARIANT;
    InvokeHelper(0x102, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Index);
    return result;
}

VARIANT Worksheet::SaveAs(const VARIANT& Filename, const VARIANT& FileFormat, const VARIANT& Password, const VARIANT& WriteResPassword, const VARIANT& ReadOnlyRecommended, const VARIANT& CreateBackup)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
    InvokeHelper(0x11c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Filename, &FileFormat, &Password, &WriteResPassword, &ReadOnlyRecommended, &CreateBackup);
    return result;
}

VARIANT Worksheet::Scenarios(const VARIANT& Index)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT;
    InvokeHelper(0x38c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Index);
    return result;
}

VARIANT Worksheet::ScrollBars(const VARIANT& Index)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT;
    InvokeHelper(0x33e, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Index);
    return result;
}

VARIANT Worksheet::Select(const VARIANT& Replace)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT;
    InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Replace);
    return result;
}

//************************************
void Worksheet::Select()
{
    TRACE("Entering Worksheet::Select\n");
    InvokeHelper(0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
//************************************

VARIANT Worksheet::ShowAllData()
{
    VARIANT result;
    InvokeHelper(0x31a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
    return result;
}

VARIANT Worksheet::ShowDataForm()
{
    VARIANT result;
    InvokeHelper(0x199, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
    return result;
}

VARIANT Worksheet::Spinners(const VARIANT& Index)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT;
    InvokeHelper(0x346, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Index);
    return result;
}

VARIANT Worksheet::TextBoxes(const VARIANT& Index)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT;
    InvokeHelper(0x309, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Index);
    return result;
}

VARIANT Worksheet::Unprotect(const VARIANT& Password)
{
    VARIANT result;
    static BYTE BASED_CODE parms[] =
        VTS_VARIANT;
    InvokeHelper(0x11d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
        &Password);
    return result;
}
