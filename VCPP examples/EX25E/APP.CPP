// Machine generated IDispatch driver class(es) created with ClassWizard.

#include "stdafx.h"
#include "app.h"


/////////////////////////////////////////////////////////////////////////////
// Application properties

VARIANT Application::GetActiveCell()
{
	VARIANT result;
	GetProperty(0x131, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetActiveCell(const VARIANT& propVal)
{
	SetProperty(0x131, VT_VARIANT, &propVal);
}

VARIANT Application::GetActiveChart()
{
	VARIANT result;
	GetProperty(0xb7, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetActiveChart(const VARIANT& propVal)
{
	SetProperty(0xb7, VT_VARIANT, &propVal);
}

VARIANT Application::GetActiveDialog()
{
	VARIANT result;
	GetProperty(0x32f, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetActiveDialog(const VARIANT& propVal)
{
	SetProperty(0x32f, VT_VARIANT, &propVal);
}

VARIANT Application::GetActiveMenuBar()
{
	VARIANT result;
	GetProperty(0x2f6, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetActiveMenuBar(const VARIANT& propVal)
{
	SetProperty(0x2f6, VT_VARIANT, &propVal);
}

VARIANT Application::GetActivePrinter()
{
	VARIANT result;
	GetProperty(0x132, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetActivePrinter(const VARIANT& propVal)
{
	SetProperty(0x132, VT_VARIANT, &propVal);
}

VARIANT Application::GetActiveSheet()
{
	VARIANT result;
	GetProperty(0x133, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetActiveSheet(const VARIANT& propVal)
{
	SetProperty(0x133, VT_VARIANT, &propVal);
}

VARIANT Application::GetActiveWindow()
{
	VARIANT result;
	GetProperty(0x2f7, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetActiveWindow(const VARIANT& propVal)
{
	SetProperty(0x2f7, VT_VARIANT, &propVal);
}

VARIANT Application::GetActiveWorkbook()
{
	VARIANT result;
	GetProperty(0x134, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetActiveWorkbook(const VARIANT& propVal)
{
	SetProperty(0x134, VT_VARIANT, &propVal);
}

VARIANT Application::GetAlertBeforeOverwriting()
{
	VARIANT result;
	GetProperty(0x3a2, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetAlertBeforeOverwriting(const VARIANT& propVal)
{
	SetProperty(0x3a2, VT_VARIANT, &propVal);
}

VARIANT Application::GetAltStartupPath()
{
	VARIANT result;
	GetProperty(0x139, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetAltStartupPath(const VARIANT& propVal)
{
	SetProperty(0x139, VT_VARIANT, &propVal);
}

VARIANT Application::GetAskToUpdateLinks()
{
	VARIANT result;
	GetProperty(0x3e0, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetAskToUpdateLinks(const VARIANT& propVal)
{
	SetProperty(0x3e0, VT_VARIANT, &propVal);
}

VARIANT Application::GetBuild()
{
	VARIANT result;
	GetProperty(0x13a, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetBuild(const VARIANT& propVal)
{
	SetProperty(0x13a, VT_VARIANT, &propVal);
}

VARIANT Application::GetCalculateBeforeSave()
{
	VARIANT result;
	GetProperty(0x13b, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetCalculateBeforeSave(const VARIANT& propVal)
{
	SetProperty(0x13b, VT_VARIANT, &propVal);
}

VARIANT Application::GetCalculation()
{
	VARIANT result;
	GetProperty(0x13c, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetCalculation(const VARIANT& propVal)
{
	SetProperty(0x13c, VT_VARIANT, &propVal);
}

VARIANT Application::GetCaller()
{
	VARIANT result;
	GetProperty(0x13d, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetCaller(const VARIANT& propVal)
{
	SetProperty(0x13d, VT_VARIANT, &propVal);
}

VARIANT Application::GetCanPlaySounds()
{
	VARIANT result;
	GetProperty(0x13e, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetCanPlaySounds(const VARIANT& propVal)
{
	SetProperty(0x13e, VT_VARIANT, &propVal);
}

VARIANT Application::GetCanRecordSounds()
{
	VARIANT result;
	GetProperty(0x13f, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetCanRecordSounds(const VARIANT& propVal)
{
	SetProperty(0x13f, VT_VARIANT, &propVal);
}

VARIANT Application::GetCaption()
{
	VARIANT result;
	GetProperty(0x8b, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetCaption(const VARIANT& propVal)
{
	SetProperty(0x8b, VT_VARIANT, &propVal);
}

VARIANT Application::GetCellDragAndDrop()
{
	VARIANT result;
	GetProperty(0x140, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetCellDragAndDrop(const VARIANT& propVal)
{
	SetProperty(0x140, VT_VARIANT, &propVal);
}

VARIANT Application::GetClipboardFormats()
{
	VARIANT result;
	GetProperty(0x141, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetClipboardFormats(const VARIANT& propVal)
{
	SetProperty(0x141, VT_VARIANT, &propVal);
}

VARIANT Application::GetColorButtons()
{
	VARIANT result;
	GetProperty(0x16d, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetColorButtons(const VARIANT& propVal)
{
	SetProperty(0x16d, VT_VARIANT, &propVal);
}

VARIANT Application::GetCommandUnderlines()
{
	VARIANT result;
	GetProperty(0x143, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetCommandUnderlines(const VARIANT& propVal)
{
	SetProperty(0x143, VT_VARIANT, &propVal);
}

VARIANT Application::GetConstrainNumeric()
{
	VARIANT result;
	GetProperty(0x144, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetConstrainNumeric(const VARIANT& propVal)
{
	SetProperty(0x144, VT_VARIANT, &propVal);
}

VARIANT Application::GetCopyObjectsWithCells()
{
	VARIANT result;
	GetProperty(0x3df, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetCopyObjectsWithCells(const VARIANT& propVal)
{
	SetProperty(0x3df, VT_VARIANT, &propVal);
}

VARIANT Application::GetCreator()
{
	VARIANT result;
	GetProperty(0x95, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetCreator(const VARIANT& propVal)
{
	SetProperty(0x95, VT_VARIANT, &propVal);
}

VARIANT Application::GetCustomListCount()
{
	VARIANT result;
	GetProperty(0x313, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetCustomListCount(const VARIANT& propVal)
{
	SetProperty(0x313, VT_VARIANT, &propVal);
}

VARIANT Application::GetCutCopyMode()
{
	VARIANT result;
	GetProperty(0x14a, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetCutCopyMode(const VARIANT& propVal)
{
	SetProperty(0x14a, VT_VARIANT, &propVal);
}

VARIANT Application::GetDataEntryMode()
{
	VARIANT result;
	GetProperty(0x14b, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetDataEntryMode(const VARIANT& propVal)
{
	SetProperty(0x14b, VT_VARIANT, &propVal);
}

VARIANT Application::GetDDEAppReturnCode()
{
	VARIANT result;
	GetProperty(0x14c, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetDDEAppReturnCode(const VARIANT& propVal)
{
	SetProperty(0x14c, VT_VARIANT, &propVal);
}

VARIANT Application::GetDefaultFilePath()
{
	VARIANT result;
	GetProperty(0x40e, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetDefaultFilePath(const VARIANT& propVal)
{
	SetProperty(0x40e, VT_VARIANT, &propVal);
}

VARIANT Application::GetDisplayAlerts()
{
	VARIANT result;
	GetProperty(0x157, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetDisplayAlerts(const VARIANT& propVal)
{
	SetProperty(0x157, VT_VARIANT, &propVal);
}

VARIANT Application::GetDisplayClipboardWindow()
{
	VARIANT result;
	GetProperty(0x142, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetDisplayClipboardWindow(const VARIANT& propVal)
{
	SetProperty(0x142, VT_VARIANT, &propVal);
}

VARIANT Application::GetDisplayExcel4Menus()
{
	VARIANT result;
	GetProperty(0x39f, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetDisplayExcel4Menus(const VARIANT& propVal)
{
	SetProperty(0x39f, VT_VARIANT, &propVal);
}

VARIANT Application::GetDisplayFormulaBar()
{
	VARIANT result;
	GetProperty(0x158, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetDisplayFormulaBar(const VARIANT& propVal)
{
	SetProperty(0x158, VT_VARIANT, &propVal);
}

VARIANT Application::GetDisplayFullScreen()
{
	VARIANT result;
	GetProperty(0x425, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetDisplayFullScreen(const VARIANT& propVal)
{
	SetProperty(0x425, VT_VARIANT, &propVal);
}

VARIANT Application::GetDisplayInfoWindow()
{
	VARIANT result;
	GetProperty(0x2fd, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetDisplayInfoWindow(const VARIANT& propVal)
{
	SetProperty(0x2fd, VT_VARIANT, &propVal);
}

VARIANT Application::GetDisplayNoteIndicator()
{
	VARIANT result;
	GetProperty(0x159, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetDisplayNoteIndicator(const VARIANT& propVal)
{
	SetProperty(0x159, VT_VARIANT, &propVal);
}

VARIANT Application::GetDisplayRecentFiles()
{
	VARIANT result;
	GetProperty(0x39e, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetDisplayRecentFiles(const VARIANT& propVal)
{
	SetProperty(0x39e, VT_VARIANT, &propVal);
}

VARIANT Application::GetDisplayScrollBars()
{
	VARIANT result;
	GetProperty(0x15a, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetDisplayScrollBars(const VARIANT& propVal)
{
	SetProperty(0x15a, VT_VARIANT, &propVal);
}

VARIANT Application::GetDisplayStatusBar()
{
	VARIANT result;
	GetProperty(0x15b, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetDisplayStatusBar(const VARIANT& propVal)
{
	SetProperty(0x15b, VT_VARIANT, &propVal);
}

VARIANT Application::GetEditDirectlyInCell()
{
	VARIANT result;
	GetProperty(0x3a1, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetEditDirectlyInCell(const VARIANT& propVal)
{
	SetProperty(0x3a1, VT_VARIANT, &propVal);
}

VARIANT Application::GetEnableCancelKey()
{
	VARIANT result;
	GetProperty(0x448, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetEnableCancelKey(const VARIANT& propVal)
{
	SetProperty(0x448, VT_VARIANT, &propVal);
}

VARIANT Application::GetEnableTipWizard()
{
	VARIANT result;
	GetProperty(0x428, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetEnableTipWizard(const VARIANT& propVal)
{
	SetProperty(0x428, VT_VARIANT, &propVal);
}

VARIANT Application::GetFileConverters()
{
	VARIANT result;
	GetProperty(0x3a3, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetFileConverters(const VARIANT& propVal)
{
	SetProperty(0x3a3, VT_VARIANT, &propVal);
}

VARIANT Application::GetFixedDecimal()
{
	VARIANT result;
	GetProperty(0x15f, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetFixedDecimal(const VARIANT& propVal)
{
	SetProperty(0x15f, VT_VARIANT, &propVal);
}

VARIANT Application::GetFixedDecimalPlaces()
{
	VARIANT result;
	GetProperty(0x160, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetFixedDecimalPlaces(const VARIANT& propVal)
{
	SetProperty(0x160, VT_VARIANT, &propVal);
}

VARIANT Application::GetHeight()
{
	VARIANT result;
	GetProperty(0x7b, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetHeight(const VARIANT& propVal)
{
	SetProperty(0x7b, VT_VARIANT, &propVal);
}

VARIANT Application::GetIgnoreRemoteRequests()
{
	VARIANT result;
	GetProperty(0x164, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetIgnoreRemoteRequests(const VARIANT& propVal)
{
	SetProperty(0x164, VT_VARIANT, &propVal);
}

VARIANT Application::GetInteractive()
{
	VARIANT result;
	GetProperty(0x169, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetInteractive(const VARIANT& propVal)
{
	SetProperty(0x169, VT_VARIANT, &propVal);
}

VARIANT Application::GetInternational()
{
	VARIANT result;
	GetProperty(0x16a, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetInternational(const VARIANT& propVal)
{
	SetProperty(0x16a, VT_VARIANT, &propVal);
}

VARIANT Application::GetIteration()
{
	VARIANT result;
	GetProperty(0x16b, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetIteration(const VARIANT& propVal)
{
	SetProperty(0x16b, VT_VARIANT, &propVal);
}

VARIANT Application::GetLargeButtons()
{
	VARIANT result;
	GetProperty(0x16c, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetLargeButtons(const VARIANT& propVal)
{
	SetProperty(0x16c, VT_VARIANT, &propVal);
}

VARIANT Application::GetLeft()
{
	VARIANT result;
	GetProperty(0x7f, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetLeft(const VARIANT& propVal)
{
	SetProperty(0x7f, VT_VARIANT, &propVal);
}

VARIANT Application::GetLibraryPath()
{
	VARIANT result;
	GetProperty(0x16e, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetLibraryPath(const VARIANT& propVal)
{
	SetProperty(0x16e, VT_VARIANT, &propVal);
}

VARIANT Application::GetMailSession()
{
	VARIANT result;
	GetProperty(0x3ae, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetMailSession(const VARIANT& propVal)
{
	SetProperty(0x3ae, VT_VARIANT, &propVal);
}

VARIANT Application::GetMailSystem()
{
	VARIANT result;
	GetProperty(0x3cb, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetMailSystem(const VARIANT& propVal)
{
	SetProperty(0x3cb, VT_VARIANT, &propVal);
}

VARIANT Application::GetMathCoprocessorAvailable()
{
	VARIANT result;
	GetProperty(0x16f, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetMathCoprocessorAvailable(const VARIANT& propVal)
{
	SetProperty(0x16f, VT_VARIANT, &propVal);
}

VARIANT Application::GetMaxChange()
{
	VARIANT result;
	GetProperty(0x170, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetMaxChange(const VARIANT& propVal)
{
	SetProperty(0x170, VT_VARIANT, &propVal);
}

VARIANT Application::GetMaxIterations()
{
	VARIANT result;
	GetProperty(0x171, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetMaxIterations(const VARIANT& propVal)
{
	SetProperty(0x171, VT_VARIANT, &propVal);
}

VARIANT Application::GetMemoryFree()
{
	VARIANT result;
	GetProperty(0x172, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetMemoryFree(const VARIANT& propVal)
{
	SetProperty(0x172, VT_VARIANT, &propVal);
}

VARIANT Application::GetMemoryTotal()
{
	VARIANT result;
	GetProperty(0x173, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetMemoryTotal(const VARIANT& propVal)
{
	SetProperty(0x173, VT_VARIANT, &propVal);
}

VARIANT Application::GetMemoryUsed()
{
	VARIANT result;
	GetProperty(0x174, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetMemoryUsed(const VARIANT& propVal)
{
	SetProperty(0x174, VT_VARIANT, &propVal);
}

VARIANT Application::GetMouseAvailable()
{
	VARIANT result;
	GetProperty(0x175, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetMouseAvailable(const VARIANT& propVal)
{
	SetProperty(0x175, VT_VARIANT, &propVal);
}

VARIANT Application::GetMoveAfterReturn()
{
	VARIANT result;
	GetProperty(0x176, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetMoveAfterReturn(const VARIANT& propVal)
{
	SetProperty(0x176, VT_VARIANT, &propVal);
}

VARIANT Application::GetName()
{
	VARIANT result;
	GetProperty(0x6e, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetName(const VARIANT& propVal)
{
	SetProperty(0x6e, VT_VARIANT, &propVal);
}

VARIANT Application::GetOnCalculate()
{
	VARIANT result;
	GetProperty(0x271, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetOnCalculate(const VARIANT& propVal)
{
	SetProperty(0x271, VT_VARIANT, &propVal);
}

VARIANT Application::GetOnData()
{
	VARIANT result;
	GetProperty(0x275, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetOnData(const VARIANT& propVal)
{
	SetProperty(0x275, VT_VARIANT, &propVal);
}

VARIANT Application::GetOnDoubleClick()
{
	VARIANT result;
	GetProperty(0x274, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetOnDoubleClick(const VARIANT& propVal)
{
	SetProperty(0x274, VT_VARIANT, &propVal);
}

VARIANT Application::GetOnEntry()
{
	VARIANT result;
	GetProperty(0x273, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetOnEntry(const VARIANT& propVal)
{
	SetProperty(0x273, VT_VARIANT, &propVal);
}

VARIANT Application::GetOnSheetActivate()
{
	VARIANT result;
	GetProperty(0x407, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetOnSheetActivate(const VARIANT& propVal)
{
	SetProperty(0x407, VT_VARIANT, &propVal);
}

VARIANT Application::GetOnSheetDeactivate()
{
	VARIANT result;
	GetProperty(0x439, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetOnSheetDeactivate(const VARIANT& propVal)
{
	SetProperty(0x439, VT_VARIANT, &propVal);
}

VARIANT Application::GetOnWindow()
{
	VARIANT result;
	GetProperty(0x26f, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetOnWindow(const VARIANT& propVal)
{
	SetProperty(0x26f, VT_VARIANT, &propVal);
}

VARIANT Application::GetOperatingSystem()
{
	VARIANT result;
	GetProperty(0x177, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetOperatingSystem(const VARIANT& propVal)
{
	SetProperty(0x177, VT_VARIANT, &propVal);
}

VARIANT Application::GetOrganizationName()
{
	VARIANT result;
	GetProperty(0x178, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetOrganizationName(const VARIANT& propVal)
{
	SetProperty(0x178, VT_VARIANT, &propVal);
}

VARIANT Application::GetParent()
{
	VARIANT result;
	GetProperty(0x96, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetParent(const VARIANT& propVal)
{
	SetProperty(0x96, VT_VARIANT, &propVal);
}

VARIANT Application::GetPath()
{
	VARIANT result;
	GetProperty(0x123, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetPath(const VARIANT& propVal)
{
	SetProperty(0x123, VT_VARIANT, &propVal);
}

VARIANT Application::GetPathSeparator()
{
	VARIANT result;
	GetProperty(0x179, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetPathSeparator(const VARIANT& propVal)
{
	SetProperty(0x179, VT_VARIANT, &propVal);
}

VARIANT Application::GetPreviousSelections()
{
	VARIANT result;
	GetProperty(0x17a, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetPreviousSelections(const VARIANT& propVal)
{
	SetProperty(0x17a, VT_VARIANT, &propVal);
}

VARIANT Application::GetPromptForSummaryInfo()
{
	VARIANT result;
	GetProperty(0x426, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetPromptForSummaryInfo(const VARIANT& propVal)
{
	SetProperty(0x426, VT_VARIANT, &propVal);
}

VARIANT Application::GetRecordRelative()
{
	VARIANT result;
	GetProperty(0x17b, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetRecordRelative(const VARIANT& propVal)
{
	SetProperty(0x17b, VT_VARIANT, &propVal);
}

VARIANT Application::GetReferenceStyle()
{
	VARIANT result;
	GetProperty(0x17c, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetReferenceStyle(const VARIANT& propVal)
{
	SetProperty(0x17c, VT_VARIANT, &propVal);
}

VARIANT Application::GetRegisteredFunctions()
{
	VARIANT result;
	GetProperty(0x307, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetRegisteredFunctions(const VARIANT& propVal)
{
	SetProperty(0x307, VT_VARIANT, &propVal);
}

VARIANT Application::GetScreenUpdating()
{
	VARIANT result;
	GetProperty(0x17e, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetScreenUpdating(const VARIANT& propVal)
{
	SetProperty(0x17e, VT_VARIANT, &propVal);
}

VARIANT Application::GetSelection()
{
	VARIANT result;
	GetProperty(0x93, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetSelection(const VARIANT& propVal)
{
	SetProperty(0x93, VT_VARIANT, &propVal);
}

VARIANT Application::GetSheetsInNewWorkbook()
{
	VARIANT result;
	GetProperty(0x3e1, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetSheetsInNewWorkbook(short i)
{
	SetProperty(0x3e1, VT_I2, i);
}
/*
void Application::SetSheetsInNewWorkbook(const VARIANT& propVal)
{
	SetProperty(0x3e1, VT_VARIANT, &propVal);
}
*/
VARIANT Application::GetShowToolTips()
{
	VARIANT result;
	GetProperty(0x183, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetShowToolTips(const VARIANT& propVal)
{
	SetProperty(0x183, VT_VARIANT, &propVal);
}

VARIANT Application::GetStandardFont()
{
	VARIANT result;
	GetProperty(0x39c, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetStandardFont(const VARIANT& propVal)
{
	SetProperty(0x39c, VT_VARIANT, &propVal);
}

VARIANT Application::GetStandardFontSize()
{
	VARIANT result;
	GetProperty(0x39d, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetStandardFontSize(const VARIANT& propVal)
{
	SetProperty(0x39d, VT_VARIANT, &propVal);
}

VARIANT Application::GetStartupPath()
{
	VARIANT result;
	GetProperty(0x181, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetStartupPath(const VARIANT& propVal)
{
	SetProperty(0x181, VT_VARIANT, &propVal);
}

VARIANT Application::GetStatusBar()
{
	VARIANT result;
	GetProperty(0x182, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetStatusBar(const VARIANT& propVal)
{
	SetProperty(0x182, VT_VARIANT, &propVal);
}

VARIANT Application::GetThisWorkbook()
{
	VARIANT result;
	GetProperty(0x30a, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetThisWorkbook(const VARIANT& propVal)
{
	SetProperty(0x30a, VT_VARIANT, &propVal);
}

VARIANT Application::GetTop()
{
	VARIANT result;
	GetProperty(0x7e, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetTop(const VARIANT& propVal)
{
	SetProperty(0x7e, VT_VARIANT, &propVal);
}

VARIANT Application::GetTransitionMenuKey()
{
	VARIANT result;
	GetProperty(0x136, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetTransitionMenuKey(const VARIANT& propVal)
{
	SetProperty(0x136, VT_VARIANT, &propVal);
}

VARIANT Application::GetTransitionMenuKeyAction()
{
	VARIANT result;
	GetProperty(0x137, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetTransitionMenuKeyAction(const VARIANT& propVal)
{
	SetProperty(0x137, VT_VARIANT, &propVal);
}

VARIANT Application::GetTransitionNavigKeys()
{
	VARIANT result;
	GetProperty(0x138, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetTransitionNavigKeys(const VARIANT& propVal)
{
	SetProperty(0x138, VT_VARIANT, &propVal);
}

VARIANT Application::GetUsableHeight()
{
	VARIANT result;
	GetProperty(0x185, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetUsableHeight(const VARIANT& propVal)
{
	SetProperty(0x185, VT_VARIANT, &propVal);
}

VARIANT Application::GetUsableWidth()
{
	VARIANT result;
	GetProperty(0x186, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetUsableWidth(const VARIANT& propVal)
{
	SetProperty(0x186, VT_VARIANT, &propVal);
}

VARIANT Application::GetUserName()
{
	VARIANT result;
	GetProperty(0x187, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetUserName(const VARIANT& propVal)
{
	SetProperty(0x187, VT_VARIANT, &propVal);
}

VARIANT Application::GetValue()
{
	VARIANT result;
	GetProperty(0x6, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetValue(const VARIANT& propVal)
{
	SetProperty(0x6, VT_VARIANT, &propVal);
}

VARIANT Application::GetVersion()
{
	VARIANT result;
	GetProperty(0x188, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetVersion(const VARIANT& propVal)
{
	SetProperty(0x188, VT_VARIANT, &propVal);
}

VARIANT Application::GetVisible()
{
	VARIANT result;
	GetProperty(0x22e, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetVisible(const VARIANT& propVal)
{
	SetProperty(0x22e, VT_VARIANT, &propVal);
}

VARIANT Application::GetWidth()
{
	VARIANT result;
	GetProperty(0x7a, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetWidth(const VARIANT& propVal)
{
	SetProperty(0x7a, VT_VARIANT, &propVal);
}

VARIANT Application::GetWindowsForPens()
{
	VARIANT result;
	GetProperty(0x18b, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetWindowsForPens(const VARIANT& propVal)
{
	SetProperty(0x18b, VT_VARIANT, &propVal);
}

VARIANT Application::GetWindowState()
{
	VARIANT result;
	GetProperty(0x18c, VT_VARIANT, (void*)&result);
	return result;
}

void Application::SetWindowState(const VARIANT& propVal)
{
	SetProperty(0x18c, VT_VARIANT, &propVal);
}

/////////////////////////////////////////////////////////////////////////////
// Application operations

VARIANT Application::_WSFunction(const VARIANT& Range, const VARIANT& Arg1, const VARIANT& Arg2, const VARIANT& Arg3, const VARIANT& Arg4, const VARIANT& Arg5, const VARIANT& Arg6, const VARIANT& Arg7, const VARIANT& Arg8, const VARIANT& Arg9, 
		const VARIANT& Arg10, const VARIANT& Arg11, const VARIANT& Arg12, const VARIANT& Arg13, const VARIANT& Arg14, const VARIANT& Arg15, const VARIANT& Arg16, const VARIANT& Arg17, const VARIANT& Arg18, const VARIANT& Arg19, 
		const VARIANT& Arg20, const VARIANT& Arg21, const VARIANT& Arg22, const VARIANT& Arg23, const VARIANT& Arg24, const VARIANT& Arg25, const VARIANT& Arg26, const VARIANT& Arg27, const VARIANT& Arg28, const VARIANT& Arg29, 
		const VARIANT& Arg30)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT 
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0xa9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Range, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
	return result;
}

VARIANT Application::Acos()
{
	VARIANT result;
	InvokeHelper(0x4063, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Acosh()
{
	VARIANT result;
	InvokeHelper(0x40e9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::ActivateMicrosoftApp(const VARIANT& Index)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x447, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Index);
	return result;
}

VARIANT Application::AddChartAutoFormat(const VARIANT& Chart, const VARIANT& Name, const VARIANT& Description)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0xd8, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Chart, &Name, &Description);
	return result;
}

VARIANT Application::AddCustomList(const VARIANT& ListArray, const VARIANT& ByRow)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x30c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&ListArray, &ByRow);
	return result;
}

VARIANT Application::AddIns(const VARIANT& Index)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x225, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Index);
	return result;
}

VARIANT Application::And()
{
	VARIANT result;
	InvokeHelper(0x4024, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Application_()
{
	VARIANT result;
	InvokeHelper(0x94, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Asin()
{
	VARIANT result;
	InvokeHelper(0x4062, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Asinh()
{
	VARIANT result;
	InvokeHelper(0x40e8, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Atan2()
{
	VARIANT result;
	InvokeHelper(0x4061, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Atanh()
{
	VARIANT result;
	InvokeHelper(0x40ea, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::AveDev()
{
	VARIANT result;
	InvokeHelper(0x410d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Average()
{
	VARIANT result;
	InvokeHelper(0x4005, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::BetaDist()
{
	VARIANT result;
	InvokeHelper(0x410e, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::BetaInv()
{
	VARIANT result;
	InvokeHelper(0x4110, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::BinomDist()
{
	VARIANT result;
	InvokeHelper(0x4111, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Calculate()
{
	VARIANT result;
	InvokeHelper(0x117, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Ceiling()
{
	VARIANT result;
	InvokeHelper(0x4120, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Cells(const VARIANT& RowIndex, const VARIANT& ColumnIndex)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0xee, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&RowIndex, &ColumnIndex);
	return result;
}

VARIANT Application::CentimetersToPoints(const VARIANT& Centimeters)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x43e, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Centimeters);
	return result;
}

VARIANT Application::Charts(const VARIANT& Index)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x79, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Index);
	return result;
}

VARIANT Application::CheckSpelling(const VARIANT& Word, const VARIANT& CustomDictionary, const VARIANT& IgnoreUppercase)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Word, &CustomDictionary, &IgnoreUppercase);
	return result;
}

VARIANT Application::ChiDist()
{
	VARIANT result;
	InvokeHelper(0x4112, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::ChiInv()
{
	VARIANT result;
	InvokeHelper(0x4113, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::ChiTest()
{
	VARIANT result;
	InvokeHelper(0x4132, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Choose()
{
	VARIANT result;
	InvokeHelper(0x4064, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Clean()
{
	VARIANT result;
	InvokeHelper(0x40a2, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Columns(const VARIANT& Index)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0xf1, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Index);
	return result;
}

VARIANT Application::Combin()
{
	VARIANT result;
	InvokeHelper(0x4114, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Confidence()
{
	VARIANT result;
	InvokeHelper(0x4115, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::ConvertFormula(const VARIANT& Formula, const VARIANT& FromReferenceStyle, const VARIANT& ToReferenceStyle, const VARIANT& ToAbsolute, const VARIANT& RelativeTo)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x145, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Formula, &FromReferenceStyle, &ToReferenceStyle, &ToAbsolute, &RelativeTo);
	return result;
}

VARIANT Application::Correl()
{
	VARIANT result;
	InvokeHelper(0x4133, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Cosh()
{
	VARIANT result;
	InvokeHelper(0x40e6, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Count()
{
	VARIANT result;
	InvokeHelper(0x4000, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::CountA()
{
	VARIANT result;
	InvokeHelper(0x40a9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::CountBlank()
{
	VARIANT result;
	InvokeHelper(0x415b, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::CountIf()
{
	VARIANT result;
	InvokeHelper(0x415a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Covar()
{
	VARIANT result;
	InvokeHelper(0x4134, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::CritBinom()
{
	VARIANT result;
	InvokeHelper(0x4116, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::DAverage()
{
	VARIANT result;
	InvokeHelper(0x402a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Days360()
{
	VARIANT result;
	InvokeHelper(0x40dc, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Db()
{
	VARIANT result;
	InvokeHelper(0x40f7, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::DCount()
{
	VARIANT result;
	InvokeHelper(0x4028, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::DCountA()
{
	VARIANT result;
	InvokeHelper(0x40c7, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Ddb()
{
	VARIANT result;
	InvokeHelper(0x4090, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::DDEExecute(const VARIANT& Channel, const VARIANT& String)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x14d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Channel, &String);
	return result;
}

VARIANT Application::DDEInitiate(const VARIANT& App, const VARIANT& Topic)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x14e, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&App, &Topic);
	return result;
}

VARIANT Application::DDEPoke(const VARIANT& Channel, const VARIANT& Item, const VARIANT& Data)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x14f, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Channel, &Item, &Data);
	return result;
}

VARIANT Application::DDERequest(const VARIANT& Channel, const VARIANT& Item)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x150, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Channel, &Item);
	return result;
}

VARIANT Application::DDETerminate(const VARIANT& Channel)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x151, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Channel);
	return result;
}

VARIANT Application::Degrees()
{
	VARIANT result;
	InvokeHelper(0x4157, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::DeleteChartAutoFormat(const VARIANT& Name)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0xd9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Name);
	return result;
}

VARIANT Application::DeleteCustomList(const VARIANT& ListNum)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x30f, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&ListNum);
	return result;
}

VARIANT Application::DevSq()
{
	VARIANT result;
	InvokeHelper(0x413e, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::DGet()
{
	VARIANT result;
	InvokeHelper(0x40eb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Dialogs(const VARIANT& Index)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x2f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Index);
	return result;
}

VARIANT Application::DialogSheets(const VARIANT& Index)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x2fc, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Index);
	return result;
}

VARIANT Application::DMax()
{
	VARIANT result;
	InvokeHelper(0x402c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::DMin()
{
	VARIANT result;
	InvokeHelper(0x402b, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Dollar()
{
	VARIANT result;
	InvokeHelper(0x400d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::DoubleClick()
{
	VARIANT result;
	InvokeHelper(0x15d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::DProduct()
{
	VARIANT result;
	InvokeHelper(0x40bd, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::DStDev()
{
	VARIANT result;
	InvokeHelper(0x402d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::DStDevP()
{
	VARIANT result;
	InvokeHelper(0x40c3, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::DSum()
{
	VARIANT result;
	InvokeHelper(0x4029, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::DVar()
{
	VARIANT result;
	InvokeHelper(0x402f, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::DVarP()
{
	VARIANT result;
	InvokeHelper(0x40c4, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::_Evaluate(const VARIANT& Name)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Name);
	return result;
}

VARIANT Application::Evaluate(const VARIANT& Name)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0xfffffffb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Name);
	return result;
}

VARIANT Application::Even()
{
	VARIANT result;
	InvokeHelper(0x4117, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Excel4IntlMacroSheets(const VARIANT& Index)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x245, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Index);
	return result;
}

VARIANT Application::Excel4MacroSheets(const VARIANT& Index)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x243, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Index);
	return result;
}

VARIANT Application::ExecuteExcel4Macro(const VARIANT& String)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x15e, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&String);
	return result;
}

VARIANT Application::ExponDist()
{
	VARIANT result;
	InvokeHelper(0x4118, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Fact()
{
	VARIANT result;
	InvokeHelper(0x40b8, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::FDist()
{
	VARIANT result;
	InvokeHelper(0x4119, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Find()
{
	VARIANT result;
	InvokeHelper(0x407c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::FindB()
{
	VARIANT result;
	InvokeHelper(0x40cd, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::FindFile()
{
	VARIANT result;
	InvokeHelper(0x42c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::FInv()
{
	VARIANT result;
	InvokeHelper(0x411a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Fisher()
{
	VARIANT result;
	InvokeHelper(0x411b, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::FisherInv()
{
	VARIANT result;
	InvokeHelper(0x411c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Fixed()
{
	VARIANT result;
	InvokeHelper(0x400e, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Floor()
{
	VARIANT result;
	InvokeHelper(0x411d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Forecast()
{
	VARIANT result;
	InvokeHelper(0x4135, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Frequency()
{
	VARIANT result;
	InvokeHelper(0x40fc, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::FTest()
{
	VARIANT result;
	InvokeHelper(0x4136, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Fv()
{
	VARIANT result;
	InvokeHelper(0x4039, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::GammaDist()
{
	VARIANT result;
	InvokeHelper(0x411e, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::GammaInv()
{
	VARIANT result;
	InvokeHelper(0x411f, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::GammaLn()
{
	VARIANT result;
	InvokeHelper(0x410f, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::GeoMean()
{
	VARIANT result;
	InvokeHelper(0x413f, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::GetCustomListContents(const VARIANT& ListNum)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x312, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&ListNum);
	return result;
}

VARIANT Application::GetCustomListNum(const VARIANT& ListArray)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x311, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&ListArray);
	return result;
}

VARIANT Application::GetOpenFilename(const VARIANT& FileFilter, const VARIANT& FilterIndex, const VARIANT& Title, const VARIANT& ButtonText)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x433, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&FileFilter, &FilterIndex, &Title, &ButtonText);
	return result;
}

VARIANT Application::GetSaveAsFilename(const VARIANT& InitialFilename, const VARIANT& FileFilter, const VARIANT& FilterIndex, const VARIANT& Title, const VARIANT& ButtonText)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x434, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&InitialFilename, &FileFilter, &FilterIndex, &Title, &ButtonText);
	return result;
}

VARIANT Application::Goto(const VARIANT& Reference, const VARIANT& Scroll)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x1db, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Reference, &Scroll);
	return result;
}

VARIANT Application::Growth()
{
	VARIANT result;
	InvokeHelper(0x4034, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::HarMean()
{
	VARIANT result;
	InvokeHelper(0x4140, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Help(const VARIANT& HelpFile, const VARIANT& HelpContextID)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x162, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&HelpFile, &HelpContextID);
	return result;
}

VARIANT Application::HLookup()
{
	VARIANT result;
	InvokeHelper(0x4065, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::HypGeomDist()
{
	VARIANT result;
	InvokeHelper(0x4121, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::InchesToPoints(const VARIANT& Inches)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x43f, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Inches);
	return result;
}

VARIANT Application::Index()
{
	VARIANT result;
	InvokeHelper(0x401d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::InputBox(const VARIANT& Prompt, const VARIANT& Title, const VARIANT& Default, const VARIANT& Left, const VARIANT& Top, const VARIANT& HelpFile, const VARIANT& HelpContextID, const VARIANT& Type)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x165, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Prompt, &Title, &Default, &Left, &Top, &HelpFile, &HelpContextID, &Type);
	return result;
}

VARIANT Application::Intercept()
{
	VARIANT result;
	InvokeHelper(0x4137, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Intersect(const VARIANT& Arg1, const VARIANT& Arg2, const VARIANT& Arg3, const VARIANT& Arg4, const VARIANT& Arg5, const VARIANT& Arg6, const VARIANT& Arg7, const VARIANT& Arg8, const VARIANT& Arg9, const VARIANT& Arg10, 
		const VARIANT& Arg11, const VARIANT& Arg12, const VARIANT& Arg13, const VARIANT& Arg14, const VARIANT& Arg15, const VARIANT& Arg16, const VARIANT& Arg17, const VARIANT& Arg18, const VARIANT& Arg19, const VARIANT& Arg20, 
		const VARIANT& Arg21, const VARIANT& Arg22, const VARIANT& Arg23, const VARIANT& Arg24, const VARIANT& Arg25, const VARIANT& Arg26, const VARIANT& Arg27, const VARIANT& Arg28, const VARIANT& Arg29, const VARIANT& Arg30, 
		const VARIANT& Arg31)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT 
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x2fe, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30, &Arg31);
	return result;
}

VARIANT Application::Ipmt()
{
	VARIANT result;
	InvokeHelper(0x40a7, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Irr()
{
	VARIANT result;
	InvokeHelper(0x403e, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::IsErr()
{
	VARIANT result;
	InvokeHelper(0x407e, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::IsError()
{
	VARIANT result;
	InvokeHelper(0x4003, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::IsLogical()
{
	VARIANT result;
	InvokeHelper(0x40c6, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::IsNA()
{
	VARIANT result;
	InvokeHelper(0x4002, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::IsNonText()
{
	VARIANT result;
	InvokeHelper(0x40be, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::IsNumber()
{
	VARIANT result;
	InvokeHelper(0x4080, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Ispmt()
{
	VARIANT result;
	InvokeHelper(0x415e, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::IsText()
{
	VARIANT result;
	InvokeHelper(0x407f, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Kurt()
{
	VARIANT result;
	InvokeHelper(0x4142, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Large()
{
	VARIANT result;
	InvokeHelper(0x4145, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::LinEst()
{
	VARIANT result;
	InvokeHelper(0x4031, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Ln()
{
	VARIANT result;
	InvokeHelper(0x4016, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Log()
{
	VARIANT result;
	InvokeHelper(0x406d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Log10()
{
	VARIANT result;
	InvokeHelper(0x4017, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::LogEst()
{
	VARIANT result;
	InvokeHelper(0x4033, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::LogInv()
{
	VARIANT result;
	InvokeHelper(0x4123, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::LogNormDist()
{
	VARIANT result;
	InvokeHelper(0x4122, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Lookup()
{
	VARIANT result;
	InvokeHelper(0x401c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::MacroOptions(const VARIANT& Macro, const VARIANT& Description, const VARIANT& HasMenu, const VARIANT& MenuText, const VARIANT& HasShortcutKey, const VARIANT& ShortcutKey, const VARIANT& Category, const VARIANT& StatusBar, 
		const VARIANT& HelpContextID, const VARIANT& HelpFile)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x46f, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Macro, &Description, &HasMenu, &MenuText, &HasShortcutKey, &ShortcutKey, &Category, &StatusBar, &HelpContextID, &HelpFile);
	return result;
}

VARIANT Application::MailLogoff()
{
	VARIANT result;
	InvokeHelper(0x3b1, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::MailLogon(const VARIANT& Name, const VARIANT& Password, const VARIANT& DownloadNewMail)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x3af, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Name, &Password, &DownloadNewMail);
	return result;
}

VARIANT Application::Match()
{
	VARIANT result;
	InvokeHelper(0x4040, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Max()
{
	VARIANT result;
	InvokeHelper(0x4007, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::MDeterm()
{
	VARIANT result;
	InvokeHelper(0x40a3, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Median()
{
	VARIANT result;
	InvokeHelper(0x40e3, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::MenuBars(const VARIANT& Index)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x24d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Index);
	return result;
}

VARIANT Application::Min()
{
	VARIANT result;
	InvokeHelper(0x4006, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::MInverse()
{
	VARIANT result;
	InvokeHelper(0x40a4, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::MIrr()
{
	VARIANT result;
	InvokeHelper(0x403d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::MMult()
{
	VARIANT result;
	InvokeHelper(0x40a5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Mode()
{
	VARIANT result;
	InvokeHelper(0x414a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Modules(const VARIANT& Index)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x246, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Index);
	return result;
}

VARIANT Application::Names(const VARIANT& Index, const VARIANT& IndexLocal, const VARIANT& RefersTo)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x1ba, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Index, &IndexLocal, &RefersTo);
	return result;
}

VARIANT Application::NegBinomDist()
{
	VARIANT result;
	InvokeHelper(0x4124, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::NextLetter()
{
	VARIANT result;
	InvokeHelper(0x3cc, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::NormDist()
{
	VARIANT result;
	InvokeHelper(0x4125, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::NormInv()
{
	VARIANT result;
	InvokeHelper(0x4127, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::NormSDist()
{
	VARIANT result;
	InvokeHelper(0x4126, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::NormSInv()
{
	VARIANT result;
	InvokeHelper(0x4128, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::NPer()
{
	VARIANT result;
	InvokeHelper(0x403a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Npv()
{
	VARIANT result;
	InvokeHelper(0x400b, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Odd()
{
	VARIANT result;
	InvokeHelper(0x412a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::OnKey(const VARIANT& Key, const VARIANT& Procedure)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x272, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Key, &Procedure);
	return result;
}

VARIANT Application::OnRepeat(const VARIANT& Text, const VARIANT& Procedure)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x301, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Text, &Procedure);
	return result;
}

VARIANT Application::OnTime(const VARIANT& EarliestTime, const VARIANT& Procedure, const VARIANT& LatestTime, const VARIANT& Schedule)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x270, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&EarliestTime, &Procedure, &LatestTime, &Schedule);
	return result;
}

VARIANT Application::OnUndo(const VARIANT& Text, const VARIANT& Procedure)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x302, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Text, &Procedure);
	return result;
}

VARIANT Application::Or()
{
	VARIANT result;
	InvokeHelper(0x4025, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Pearson()
{
	VARIANT result;
	InvokeHelper(0x4138, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Percentile()
{
	VARIANT result;
	InvokeHelper(0x4148, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::PercentRank()
{
	VARIANT result;
	InvokeHelper(0x4149, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Permut()
{
	VARIANT result;
	InvokeHelper(0x412b, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Pi()
{
	VARIANT result;
	InvokeHelper(0x4013, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Pmt()
{
	VARIANT result;
	InvokeHelper(0x403b, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Poisson()
{
	VARIANT result;
	InvokeHelper(0x412c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Power()
{
	VARIANT result;
	InvokeHelper(0x4151, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Ppmt()
{
	VARIANT result;
	InvokeHelper(0x40a8, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Prob()
{
	VARIANT result;
	InvokeHelper(0x413d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Product()
{
	VARIANT result;
	InvokeHelper(0x40b7, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Proper()
{
	VARIANT result;
	InvokeHelper(0x4072, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Pv()
{
	VARIANT result;
	InvokeHelper(0x4038, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Quartile()
{
	VARIANT result;
	InvokeHelper(0x4147, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Quit()
{
	VARIANT result;
	InvokeHelper(0x12e, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Radians()
{
	VARIANT result;
	InvokeHelper(0x4156, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Range(const VARIANT& Cell1, const VARIANT& Cell2)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0xc5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Cell1, &Cell2);
	return result;
}

VARIANT Application::Rank()
{
	VARIANT result;
	InvokeHelper(0x40d8, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Rate()
{
	VARIANT result;
	InvokeHelper(0x403c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::RecordMacro(const VARIANT& BasicCode, const VARIANT& XlmCode)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x305, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&BasicCode, &XlmCode);
	return result;
}

VARIANT Application::RegisterXLL(const VARIANT& Filename)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Filename);
	return result;
}

VARIANT Application::Repeat()
{
	VARIANT result;
	InvokeHelper(0x12d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Replace()
{
	VARIANT result;
	InvokeHelper(0x4077, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::ReplaceB()
{
	VARIANT result;
	InvokeHelper(0x40cf, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Rept()
{
	VARIANT result;
	InvokeHelper(0x401e, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::ResetTipWizard()
{
	VARIANT result;
	InvokeHelper(0x3a0, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Roman()
{
	VARIANT result;
	InvokeHelper(0x4162, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Round()
{
	VARIANT result;
	InvokeHelper(0x401b, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::RoundDown()
{
	VARIANT result;
	InvokeHelper(0x40d5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::RoundUp()
{
	VARIANT result;
	InvokeHelper(0x40d4, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Rows(const VARIANT& Index)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x102, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Index);
	return result;
}

VARIANT Application::RSq()
{
	VARIANT result;
	InvokeHelper(0x4139, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Run(const VARIANT& Macro, const VARIANT& Arg1, const VARIANT& Arg2, const VARIANT& Arg3, const VARIANT& Arg4, const VARIANT& Arg5, const VARIANT& Arg6, const VARIANT& Arg7, const VARIANT& Arg8, const VARIANT& Arg9, 
		const VARIANT& Arg10, const VARIANT& Arg11, const VARIANT& Arg12, const VARIANT& Arg13, const VARIANT& Arg14, const VARIANT& Arg15, const VARIANT& Arg16, const VARIANT& Arg17, const VARIANT& Arg18, const VARIANT& Arg19, 
		const VARIANT& Arg20, const VARIANT& Arg21, const VARIANT& Arg22, const VARIANT& Arg23, const VARIANT& Arg24, const VARIANT& Arg25, const VARIANT& Arg26, const VARIANT& Arg27, const VARIANT& Arg28, const VARIANT& Arg29, 
		const VARIANT& Arg30)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT 
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x103, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Macro, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
	return result;
}

VARIANT Application::Save(const VARIANT& Filename)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x11b, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Filename);
	return result;
}

VARIANT Application::Search()
{
	VARIANT result;
	InvokeHelper(0x4052, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::SearchB()
{
	VARIANT result;
	InvokeHelper(0x40ce, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::SendKeys(const VARIANT& Keys, const VARIANT& Wait)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x17f, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Keys, &Wait);
	return result;
}

VARIANT Application::SetDefaultChart(const VARIANT& FormatName)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0xdb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&FormatName);
	return result;
}

VARIANT Application::Sheets(const VARIANT& Index)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1e5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Index);
	return result;
}

VARIANT Application::ShortcutMenus(const VARIANT& Index)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x308, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Index);
	return result;
}

VARIANT Application::Sinh()
{
	VARIANT result;
	InvokeHelper(0x40e5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Skew()
{
	VARIANT result;
	InvokeHelper(0x4143, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Sln()
{
	VARIANT result;
	InvokeHelper(0x408e, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Slope()
{
	VARIANT result;
	InvokeHelper(0x413b, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Small()
{
	VARIANT result;
	InvokeHelper(0x4146, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Standardize()
{
	VARIANT result;
	InvokeHelper(0x4129, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::StDev()
{
	VARIANT result;
	InvokeHelper(0x400c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::StDevP()
{
	VARIANT result;
	InvokeHelper(0x40c1, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::StEyx()
{
	VARIANT result;
	InvokeHelper(0x413a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Substitute()
{
	VARIANT result;
	InvokeHelper(0x4078, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Subtotal()
{
	VARIANT result;
	InvokeHelper(0x4158, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Sum()
{
	VARIANT result;
	InvokeHelper(0x4004, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::SumIf()
{
	VARIANT result;
	InvokeHelper(0x4159, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::SumProduct()
{
	VARIANT result;
	InvokeHelper(0x40e4, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::SumSq()
{
	VARIANT result;
	InvokeHelper(0x4141, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::SumX2MY2()
{
	VARIANT result;
	InvokeHelper(0x4130, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::SumX2PY2()
{
	VARIANT result;
	InvokeHelper(0x4131, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::SumXMY2()
{
	VARIANT result;
	InvokeHelper(0x412f, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Syd()
{
	VARIANT result;
	InvokeHelper(0x408f, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Tanh()
{
	VARIANT result;
	InvokeHelper(0x40e7, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::TDist()
{
	VARIANT result;
	InvokeHelper(0x412d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Text()
{
	VARIANT result;
	InvokeHelper(0x4030, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::TInv()
{
	VARIANT result;
	InvokeHelper(0x414c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Toolbars(const VARIANT& Index)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x228, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Index);
	return result;
}

VARIANT Application::Transpose()
{
	VARIANT result;
	InvokeHelper(0x4053, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Trend()
{
	VARIANT result;
	InvokeHelper(0x4032, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Trim()
{
	VARIANT result;
	InvokeHelper(0x4076, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::TrimMean()
{
	VARIANT result;
	InvokeHelper(0x414b, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::TTest()
{
	VARIANT result;
	InvokeHelper(0x413c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Undo()
{
	VARIANT result;
	InvokeHelper(0x12f, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Union(const VARIANT& Arg1, const VARIANT& Arg2, const VARIANT& Arg3, const VARIANT& Arg4, const VARIANT& Arg5, const VARIANT& Arg6, const VARIANT& Arg7, const VARIANT& Arg8, const VARIANT& Arg9, const VARIANT& Arg10, 
		const VARIANT& Arg11, const VARIANT& Arg12, const VARIANT& Arg13, const VARIANT& Arg14, const VARIANT& Arg15, const VARIANT& Arg16, const VARIANT& Arg17, const VARIANT& Arg18, const VARIANT& Arg19, const VARIANT& Arg20, 
		const VARIANT& Arg21, const VARIANT& Arg22, const VARIANT& Arg23, const VARIANT& Arg24, const VARIANT& Arg25, const VARIANT& Arg26, const VARIANT& Arg27, const VARIANT& Arg28, const VARIANT& Arg29, const VARIANT& Arg30, 
		const VARIANT& Arg31)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT 
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x30b, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30, &Arg31);
	return result;
}

VARIANT Application::USDollar()
{
	VARIANT result;
	InvokeHelper(0x40cc, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Var()
{
	VARIANT result;
	InvokeHelper(0x402e, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::VarP()
{
	VARIANT result;
	InvokeHelper(0x40c2, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Vdb()
{
	VARIANT result;
	InvokeHelper(0x40de, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::VLookup()
{
	VARIANT result;
	InvokeHelper(0x4066, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Volatile(const VARIANT& Volatile)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x314, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Volatile);
	return result;
}

VARIANT Application::Wait(const VARIANT& Time)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x189, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Time);
	return result;
}

VARIANT Application::Weekday()
{
	VARIANT result;
	InvokeHelper(0x4046, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Weibull()
{
	VARIANT result;
	InvokeHelper(0x412e, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT Application::Windows(const VARIANT& Index)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1ae, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Index);
	return result;
}

VARIANT Application::Workbooks(const VARIANT& Index)
{
	VARIANT result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x23c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Index);
	return result;
}
//*************************************************
// this shouldn't have worked, but it did! return value a guess
LPDISPATCH Application::Workbooks()
{
	TRACE("Entering Application::Workbooks()\n");
	LPDISPATCH result;
	InvokeHelper(0x23c, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

//*************************************************
// following return value changed from VARIANT to LPDISPATCH
LPDISPATCH Application::Worksheets(const VARIANT& Index)
{
	TRACE("Entering Application::Worksheets()\n");
	LPDISPATCH result;
	static BYTE BASED_CODE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1ee, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

VARIANT Application::ZTest()
{
	VARIANT result;
	InvokeHelper(0x4144, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}
